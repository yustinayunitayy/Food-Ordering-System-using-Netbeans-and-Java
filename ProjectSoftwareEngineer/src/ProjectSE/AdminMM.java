/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ProjectSE;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import java.awt.Component;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;


import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class AdminMM extends javax.swing.JFrame {
    Connection con;
    Statement stat;
    ResultSet rs;
    String sql; 
    
    public AdminMM() {
        initComponents();
        Config DB = new Config();
        DB.conn();
        con = DB.con;
        stat = DB.stm;
    }
 
    void delete() {
    MMMenuIDTextField.setText("");
    MMMenuNameTextField.setText("");
    MMPriceTextField.setText("");
    ImageLabel.setIcon(null);
    }
    
    private void Table() {
    DefaultTableModel model = (DefaultTableModel) MenuTable.getModel();
    model.setRowCount(0);
        try {
            sql = "SELECT * FROM menu";
            rs = stat.executeQuery(sql);

            MenuTable.getColumnModel().getColumn(3).setCellRenderer(new ImageRenderer());

            while (rs.next()) {
                String menuId = rs.getString("menu_id");
                String menuName = rs.getString("menu_name");
                double price = rs.getDouble("price");


                byte[] imageData = rs.getBytes("image");
                ImageIcon icon = new ImageIcon(imageData);
                Image scaledImage = icon.getImage().getScaledInstance(
                    100, 100, Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                
                model.addRow(new Object[]{menuId, menuName, price, scaledIcon});
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error populating table!");
        }
    }
    
    public class ImageRenderer extends DefaultTableCellRenderer {
       @Override
       public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
               boolean hasFocus, int row, int column) {
           JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
           if (value instanceof ImageIcon) {
               label.setIcon((ImageIcon) value);
               label.setText(null);
           }
           return label;
       }
   }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        MenuTable = new javax.swing.JTable();
        MMLabel = new javax.swing.JLabel();
        MMMenuIDLabel = new javax.swing.JLabel();
        MMMenuNameLabel = new javax.swing.JLabel();
        MMPriceLabel = new javax.swing.JLabel();
        MMImageLabel = new javax.swing.JLabel();
        MMBrowseButton = new javax.swing.JButton();
        MMAddButton = new javax.swing.JButton();
        MMShowButton = new javax.swing.JButton();
        MMEditButton = new javax.swing.JButton();
        MMDeleteButton = new javax.swing.JButton();
        MMMenuIDTextField = new javax.swing.JTextField();
        MMMenuNameTextField = new javax.swing.JTextField();
        MMPriceTextField = new javax.swing.JTextField();
        ImageLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MMAccountMenu = new javax.swing.JMenu();
        MMMenuMenu = new javax.swing.JMenu();
        MMOrderMenu = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        MMBackMenu = new javax.swing.JMenu();
        MMLogoutMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        MenuTable.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        MenuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Menu Name", "Price", "Image"
            }
        ));
        MenuTable.setRowHeight(100);
        MenuTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(MenuTable);

        MMLabel.setFont(new java.awt.Font("Goudy Old Style", 1, 36)); // NOI18N
        MMLabel.setText("Menu Management");

        MMMenuIDLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        MMMenuIDLabel.setText("Menu ID");

        MMMenuNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        MMMenuNameLabel.setText("Menu Name");

        MMPriceLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        MMPriceLabel.setText("Price");

        MMImageLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        MMImageLabel.setText("Image");

        MMBrowseButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        MMBrowseButton.setText("Browse");
        MMBrowseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MMBrowseButtonMouseClicked(evt);
            }
        });
        MMBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MMBrowseButtonActionPerformed(evt);
            }
        });

        MMAddButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        MMAddButton.setText("Add");
        MMAddButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MMAddButtonMouseClicked(evt);
            }
        });
        MMAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MMAddButtonActionPerformed(evt);
            }
        });

        MMShowButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        MMShowButton.setText("Show");
        MMShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MMShowButtonActionPerformed(evt);
            }
        });

        MMEditButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        MMEditButton.setText("Edit");
        MMEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MMEditButtonActionPerformed(evt);
            }
        });

        MMDeleteButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        MMDeleteButton.setText("Delete");
        MMDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MMDeleteButtonActionPerformed(evt);
            }
        });

        MMMenuIDTextField.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N

        MMMenuNameTextField.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N

        MMPriceTextField.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N

        ImageLabel.setBackground(new java.awt.Color(255, 255, 255));
        ImageLabel.setForeground(new java.awt.Color(255, 255, 255));
        ImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(MMAddButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MMShowButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MMEditButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MMDeleteButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(MMMenuNameLabel)
                                    .addComponent(MMMenuIDLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(MMPriceLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(MMImageLabel, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(MMBrowseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(MMMenuNameTextField)
                                        .addComponent(MMPriceTextField)
                                        .addComponent(MMMenuIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(ImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(MMLabel)
                        .addGap(351, 351, 351))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(MMLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MMMenuIDLabel)
                            .addComponent(MMMenuIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MMMenuNameLabel)
                            .addComponent(MMMenuNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MMPriceLabel)
                            .addComponent(MMPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MMImageLabel)
                            .addComponent(MMBrowseButton))
                        .addGap(18, 18, 18)
                        .addComponent(ImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MMAddButton)
                            .addComponent(MMShowButton)
                            .addComponent(MMEditButton)
                            .addComponent(MMDeleteButton)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jMenu1.setText("Management");

        MMAccountMenu.setText("Account Management");
        MMAccountMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MMAccountMenuMouseClicked(evt);
            }
        });
        jMenu1.add(MMAccountMenu);

        MMMenuMenu.setText("Menu Management");
        MMMenuMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MMMenuMenuMouseClicked(evt);
            }
        });
        jMenu1.add(MMMenuMenu);

        MMOrderMenu.setText("Order Management");
        MMOrderMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MMOrderMenuMouseClicked(evt);
            }
        });
        jMenu1.add(MMOrderMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");

        MMBackMenu.setText("Back to Admin Page");
        MMBackMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MMBackMenuMouseClicked(evt);
            }
        });
        jMenu2.add(MMBackMenu);

        MMLogoutMenu.setText("Logout");
        MMLogoutMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MMLogoutMenuMouseClicked(evt);
            }
        });
        jMenu2.add(MMLogoutMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MMAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MMAddButtonActionPerformed
    String menuId = MMMenuIDTextField.getText();
    String menuName = MMMenuNameTextField.getText();
    double price = Double.parseDouble(MMPriceTextField.getText());

    ImageIcon icon = (ImageIcon) ImageLabel.getIcon();

    if (icon != null && icon.getImage() != null) {
        Image image = icon.getImage();

        BufferedImage bufferedImage = new BufferedImage(
            image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = bufferedImage.createGraphics();
        g2d.drawImage(image, 0, 0, null);
        g2d.dispose();

        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(bufferedImage, "jpg", baos);
            byte[] imageBytes = baos.toByteArray();

            PreparedStatement preparedStatement = con.prepareStatement(
                "INSERT INTO menu (menu_id, menu_name, price, image) VALUES (?, ?, ?, ?)");
            preparedStatement.setString(1, menuId);
            preparedStatement.setString(2, menuName);
            preparedStatement.setDouble(3, price);
            preparedStatement.setBytes(4, imageBytes);
            preparedStatement.executeUpdate();

            JOptionPane.showMessageDialog(null, "Menu item added successfully!");
            MMMenuIDTextField.setText("");
            MMMenuNameTextField.setText("");
            MMPriceTextField.setText("");
            ImageLabel.setIcon(null);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error adding menu item!");
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select an image!");
    }
    }//GEN-LAST:event_MMAddButtonActionPerformed

    private void MMAddButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MMAddButtonMouseClicked
       
    }//GEN-LAST:event_MMAddButtonMouseClicked

    private void MMBrowseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MMBrowseButtonMouseClicked

    }//GEN-LAST:event_MMBrowseButtonMouseClicked

    private void MMBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MMBrowseButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                ImageIcon icon = new ImageIcon(selectedFile.getPath());
                Image scaledImage = icon.getImage().getScaledInstance(
                    ImageLabel.getWidth(), ImageLabel.getHeight(), Image.SCALE_SMOOTH);
                ImageLabel.setIcon(new ImageIcon(scaledImage));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error adding image!");
            }
        }
    }//GEN-LAST:event_MMBrowseButtonActionPerformed

    private void MMShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MMShowButtonActionPerformed
    DefaultTableModel model = (DefaultTableModel) MenuTable.getModel();
    model.setRowCount(0);

    try {
        sql = "SELECT * FROM menu";
        rs = stat.executeQuery(sql);

        MenuTable.getColumnModel().getColumn(3).setCellRenderer(new ImageRenderer());

        while (rs.next()) {
            String menuId = rs.getString("menu_id");
            String menuName = rs.getString("menu_name");
            double price = rs.getDouble("price");

            byte[] imageData = rs.getBytes("image");
            // Convert byte array to ImageIcon
            ImageIcon icon = new ImageIcon(imageData);
            Image scaledImage = icon.getImage().getScaledInstance(
                100, 100, Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);

            model.addRow(new Object[]{menuId, menuName, price, scaledIcon});
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error populating table!");
    }
    }//GEN-LAST:event_MMShowButtonActionPerformed

    private void MMDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MMDeleteButtonActionPerformed
     int selectedRow = MenuTable.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a menu item to delete.");
        return;
    }

    String menuId = MenuTable.getValueAt(selectedRow, 0).toString();

    try {
        PreparedStatement preparedStatement = con.prepareStatement("DELETE FROM menu WHERE menu_id = ?");
        preparedStatement.setString(1, menuId);
        int deletedRows = preparedStatement.executeUpdate();

        if (deletedRows > 0) {
            JOptionPane.showMessageDialog(null, "Menu item deleted successfully!");
            Table();
        } else {
            JOptionPane.showMessageDialog(null, "Error deleting menu item!");
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error deleting menu item!");
    }
    }//GEN-LAST:event_MMDeleteButtonActionPerformed

    private void MMEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MMEditButtonActionPerformed
    String menuId = MMMenuIDTextField.getText();
    String menuName = MMMenuNameTextField.getText();
    double price = Double.parseDouble(MMPriceTextField.getText());

    ImageIcon icon = (ImageIcon) ImageLabel.getIcon();

    if (icon != null && icon.getImage() != null) {
        Image image = icon.getImage();

        BufferedImage bufferedImage = new BufferedImage(
            image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = bufferedImage.createGraphics();
        g2d.drawImage(image, 0, 0, null);
        g2d.dispose();

        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(bufferedImage, "jpg", baos);
            byte[] imageBytes = baos.toByteArray();

            String updateQuery = "UPDATE menu SET menu_name=?, price=?, image=? WHERE menu_id=?";
            PreparedStatement preparedStatement = con.prepareStatement(updateQuery);
            preparedStatement.setString(1, menuName);
            preparedStatement.setDouble(2, price);
            preparedStatement.setBytes(3, imageBytes);
            preparedStatement.setString(4, menuId);
            
            int updatedRows = preparedStatement.executeUpdate();

            if (updatedRows > 0) {
                JOptionPane.showMessageDialog(null, "Menu item updated successfully!");
                Table();
                delete();
            } else {
                JOptionPane.showMessageDialog(null, "Error updating menu item!");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating menu item!");
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select an image!");
    }

    }//GEN-LAST:event_MMEditButtonActionPerformed

    private void MenuTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuTableMouseClicked
    int row = MenuTable.rowAtPoint(evt.getPoint());
    if (row >= 0) {
        String id = MenuTable.getValueAt(row, 0).toString();
        MMMenuIDTextField.setText(id);

        String menu_name = MenuTable.getValueAt(row, 1).toString();
        MMMenuNameTextField.setText(menu_name);

        String price = MenuTable.getValueAt(row, 2).toString();
        MMPriceTextField.setText(price);

        ImageIcon icon = (ImageIcon) MenuTable.getValueAt(row, 3);
        if (icon != null && icon.getImage() != null) {
            Image scaledImage = icon.getImage().getScaledInstance(
                ImageLabel.getWidth(), ImageLabel.getHeight(), Image.SCALE_SMOOTH);
            ImageLabel.setIcon(new ImageIcon(scaledImage));
        } else {
            ImageLabel.setIcon(null);
        }
    }
    }//GEN-LAST:event_MenuTableMouseClicked

    private void MMMenuMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MMMenuMenuMouseClicked
        dispose();
        AdminMM AMM = new AdminMM();
        AMM.setLocationRelativeTo(null);
        AMM.setLocationRelativeTo(null);
        AMM.setVisible(true);
    }//GEN-LAST:event_MMMenuMenuMouseClicked

    private void MMAccountMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MMAccountMenuMouseClicked
        dispose();
        AdminAM AAM = new AdminAM();
        AAM.setLocationRelativeTo(null);
        AAM.setLocationRelativeTo(null);
        AAM.setVisible(true);
    }//GEN-LAST:event_MMAccountMenuMouseClicked

    private void MMBackMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MMBackMenuMouseClicked
        dispose();
        AdminPage AP = new AdminPage();
        AP.setLocationRelativeTo(null);
        AP.setLocationRelativeTo(null);
        AP.setVisible(true);
    }//GEN-LAST:event_MMBackMenuMouseClicked

    private void MMLogoutMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MMLogoutMenuMouseClicked
        dispose();
        MainPage MP = new MainPage();
        MP.setLocationRelativeTo(null);
        MP.setLocationRelativeTo(null);
        MP.setVisible(true);
    }//GEN-LAST:event_MMLogoutMenuMouseClicked

    private void MMOrderMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MMOrderMenuMouseClicked
        dispose();
        AdminOM AOM = new AdminOM();
        AOM.setLocationRelativeTo(null);
        AOM.setLocationRelativeTo(null);
        AOM.setVisible(true);
    }//GEN-LAST:event_MMOrderMenuMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminMM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminMM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminMM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminMM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminMM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ImageLabel;
    private javax.swing.JMenu MMAccountMenu;
    private javax.swing.JButton MMAddButton;
    private javax.swing.JMenu MMBackMenu;
    private javax.swing.JButton MMBrowseButton;
    private javax.swing.JButton MMDeleteButton;
    private javax.swing.JButton MMEditButton;
    private javax.swing.JLabel MMImageLabel;
    private javax.swing.JLabel MMLabel;
    private javax.swing.JMenu MMLogoutMenu;
    private javax.swing.JLabel MMMenuIDLabel;
    private javax.swing.JTextField MMMenuIDTextField;
    private javax.swing.JMenu MMMenuMenu;
    private javax.swing.JLabel MMMenuNameLabel;
    private javax.swing.JTextField MMMenuNameTextField;
    private javax.swing.JMenu MMOrderMenu;
    private javax.swing.JLabel MMPriceLabel;
    private javax.swing.JTextField MMPriceTextField;
    private javax.swing.JButton MMShowButton;
    private javax.swing.JTable MenuTable;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
